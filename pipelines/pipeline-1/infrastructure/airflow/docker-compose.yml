version: '3.8'

x-airflow-common: &airflow-common
  # Use the EXACT version, not a tag that might have been updated
  image: apache/airflow:2.7.3-python3.8
  environment: &airflow-common-env
    # Core Configuration
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    
    # Database
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    
    # Celery
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    
    # Logging to MinIO
    AIRFLOW__LOGGING__REMOTE_LOGGING: 'true'
    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: 's3://airflow-logs'
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: 'minio_s3'
    
    # MinIO connection
    AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
    AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    
    # Constrain provider versions for Airflow 2.7.3
    _PIP_ADDITIONAL_REQUIREMENTS: >-
      apache-airflow-providers-amazon==8.13.0
      apache-airflow-providers-apache-kafka==1.3.1
      apache-airflow-providers-openlineage==1.2.1
      confluent-kafka
    
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - data-platform-network

services:
  # PostgreSQL - Airflow metadata
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    networks:
      - data-platform-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis - Celery broker
  redis:
    image: redis:7-alpine
    container_name: airflow-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - data-platform-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $REDIS_PASSWORD ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Airflow Init
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        echo "üîß Starting Airflow initialization..."

        # Wait for database
        echo "‚è≥ Waiting for database..."
        sleep 10

        # Test database connection
        echo "üîå Testing database connection..."
        until airflow db check 2>/dev/null; do
          echo "   Database not ready, waiting..."
          sleep 3
        done
        echo "   ‚úÖ Database connection successful"

        # Initialize database
        echo "üóÑÔ∏è  Initializing Airflow database..."
        airflow db migrate

        # Create admin user
        echo "üë§ Creating admin user..."
        airflow users create \
          --username ${AIRFLOW_ADMIN_USERNAME} \
          --password ${AIRFLOW_ADMIN_PASSWORD} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email ${AIRFLOW_ADMIN_EMAIL} 2>&1 || echo "‚ö†Ô∏è  User already exists, skipping..."

        # Set up MinIO connection
        echo "üîó Setting up MinIO connection..."
        airflow connections delete minio_s3 2>/dev/null || true
        airflow connections add minio_s3 \
          --conn-type aws \
          --conn-login ${MINIO_ROOT_USER} \
          --conn-password ${MINIO_ROOT_PASSWORD} \
          --conn-extra '{"endpoint_url": "http://minio:9000", "region_name": "us-east-1"}' || echo "‚ö†Ô∏è  MinIO connection setup failed"

        # Set up Kafka connection
        echo "üîó Setting up Kafka connection..."
        airflow connections delete kafka_default 2>/dev/null || true
        airflow connections add kafka_default \
          --conn-type generic \
          --conn-host kafka \
          --conn-port 9092 \
          --conn-extra '{"bootstrap.servers": "kafka:9092", "group.id": "airflow"}' || echo "‚ö†Ô∏è  Kafka connection setup failed"

        echo ""
        echo "‚úÖ Airflow initialization complete!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    # DO NOT override user here - use the common user
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: "no"

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # Airflow Worker
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    deploy:
      replicas: 2

  # Airflow Triggerer
  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-data:
  redis-data:

networks:
  data-platform-network:
    external: true